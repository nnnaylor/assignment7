{"name":"Assignment7","tagline":"Node Blog","body":"# Node.JS #\r\n\r\n## What Is It? ##\r\n\r\nNode.js is an open source, cross-platform runtime environment for server-side and networking applications.  These applications are written in the JavaScript language and ran using the Node.js runtime.  Node.js uses the Google V8 JavaScript engine to execute code.  Node.js also contains a built-in library that allows the applications to act as a Web server without the use of other software such as Apache and IIS.\r\n\r\n## A Little History ##\r\n\r\nNode.js was created by Ryan Dahl and first published for Linux in 2009.  Dahl had been inspired to create Node.js after seeing an upload progress bar on Flickr.  He noticed that the did not know how much of the file had been uploaded and had to query the Web Server.  So Dahl set out to find an easier way to do this.  In 2011 NPM a node package manager was introduced.  In June of the same year Microsoft partnered with Joyent, the company Dahl worked for when he developed Node.js, because they wanted a native version of Node.js for Windows.  In July the first build to support Windows was released.  In 2012 Dahl would step down as project manager and promote npm creator Isaac Schlueter as the new project manager.  Node.js would get another new project manager in 2014 when Schlueter would hand over the project to Timothy J Fontaine.\r\n\r\n## Asynchronous Events ##\r\n\r\nThis is one of the reasons that Node.js is growing so rapidly in the web development world.  Event driven programming means that the application flow is controlled by events or changes in state.  So that means that there is something listening for an event, and is then going to call a callback function once the event has been detected.  This is the process that Node.js uses.  Once Node.js enters the event-loop it will stay in the loop until there are no more callbacks to be processed, because of this Node.js runs faster and more efficient than most other server-side applications.\r\n\r\n## JavaScript ##\r\n\r\nAnother reason that Node.js differentiates itself from other server-side frameworks is that it is written in JavaScript.  JavaScript is the language that the client-side applications are going to be written in.  So this makes things a lot easier for server-side programmers to use their knowledge of JavaScript functions and use them when they are writing server-side applications.  This also allows programmers who have never written server-side code before to start learning and developing.  Another advantage is that when developing you no longer need to use multiple languages (one for server-side, one for client-side).\r\n\r\n## What Causes Bottlenecks? ##\r\n\r\nWhen Node.js was being developed Dahl designed it using the idea that the I/O was the bottleneck and not computations.  So he wanted Node.js to be a non blocking I/O.  In a blocking I/O the idea is that when a request is made the function must return the results immediately.  This idea doesn't allow for you to go ahead and run other functions while you wait for the first function to return.  The thought of using a non blocking I/O is that while you wait for the first function to return its results you can start running other functions that don't need those results.  This concept goes back to the main advantage of Node.js and its asynchronous events.\r\n\r\n## Node.js ##\r\n\r\n[Node.js](https://github.com/joyent/node)\r\n\r\n[Watch](https://www.youtube.com/watch?v=jo_B4LTHi3I) Dahl give a demonstration and talk a little bit about Node.js!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}